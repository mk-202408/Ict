문제1 . kt 물류센터는 전국 5개로 주문 후 배송에 시간이 오래 걸리고 있다. kt는 빠른 배송을 위해서 HUB 배송 시스템을 만들고자 한다. 아래 요건을 확인하여 기존 주문/배송 시스템에 HUB 배송 기능을 추가하는 모델링을 하시요. 
HUB 배송은 조직HUB, 대리점HUB 2가지 종류를 추가한다.
조직HUB는 kt 마케팅팀이 대리점HUB는 대리점이 담당하며 주문 시 출고 조직으로 지정 가능하다
주문 시 조직HUB, 대리점HUB 주문여부를 선택 할 수 있다. 
HUB 주문도 물류센터 주문과 동일하게 HUB별 가용수량 내에서 주문 가능하다. 
HUB에는 사전에 물류센터에서 주문하여 기기 물량을 확보하여 둔다.

단, 문제 풀이 과정에서 필요한 전제와 가정은 응시자가 제시한다.  


답안 표시


KT 물류센터 HUB 배송 시스템 모델링
문제 분석 및 요구사항 정리
기존 문제: 전국 5개 물류센터 기반 배송으로 인한 긴 배송 시간
해결 방안: HUB 배송 시스템 도입
조직 HUB: KT 마케팅팀 담당
대리점 HUB: 대리점 담당
주문 시 출고 조직 지정 가능
HUB별 가용 수량 내에서 주문 가능
HUB 사전 물량 확보 필수
추가 요구사항:
기존 시스템에 HUB 기능 추가
주문 시 HUB 주문 여부 선택 가능
HUB 주문은 물류센터 주문과 동일한 프로세스
모델링을 위한 전제 및 가정
시스템 구성:
기존 시스템: 주문 관리 시스템, 재고 관리 시스템, 배송 관리 시스템
추가 시스템: HUB 관리 시스템
데이터:
상품 정보: 상품 코드, 상품명, 재고 수량, 가격 등
고객 정보: 고객 ID, 이름, 주소 등
주문 정보: 주문 번호, 주문일, 상품 목록, 배송지 등
HUB 정보: HUB 코드, 담당 부서, 위치, 가용 수량 등
프로세스:
주문 생성: 고객이 상품을 선택하고, 배송 방식(물류센터 직배송, HUB 배송)을 선택
재고 확인: 선택한 배송 방식에 따라 해당 위치의 재고를 확인
주문 처리: 재고가 충분하면 주문을 처리하고, 배송 요청
배송: 선택한 배송 방식에 따라 물류센터 또는 HUB에서 배송
기타:
HUB는 물리적인 공간뿐 아니라 시스템 상의 가상 공간으로도 구현 가능
HUB 간의 물량 이동은 별도의 프로세스로 관리
시스템 간의 데이터 연동은 API를 통해 이루어짐
모델링 결과 (UML 클래스 다이어그램 예시)
[이미지: UML 클래스 다이어그램]

클래스 설명:

Order: 주문 정보를 나타내는 클래스
Product: 상품 정보를 나타내는 클래스
Customer: 고객 정보를 나타내는 클래스
Hub: HUB 정보를 나타내는 클래스
Inventory: 재고 정보를 나타내는 클래스
Shipment: 배송 정보를 나타내는 클래스
관계:

Order는 Product와 1:N 관계 (하나의 주문에 여러 개의 상품 포함)
Order는 Customer와 1:1 관계 (하나의 주문은 하나의 고객에게)
Order는 Hub와 1:1 관계 (하나의 주문은 하나의 Hub와 연결)
Inventory는 Product와 1:N 관계 (하나의 상품은 여러 개의 재고를 가짐)
Shipment은 Order와 1:1 관계 (하나의 배송은 하나의 주문과 연결)
HUB 배송 기능 추가 모델링
Order 클래스에 HUB 관련 속성 추가:
hubType: HUB 종류 (조직, 대리점)
hubCode: HUB 코드
Hub 클래스에 가용 수량, 담당 부서 등의 속성 추가
Inventory 클래스에 HUB별 재고 정보 추가
새로운 Use Case:
주문 생성 시 HUB 선택 기능 추가
HUB 재고 확인 기능 추가
HUB 배송 요청 기능 추가
기대 효과
빠른 배송: HUB를 거점으로 하여 배송 시간 단축
재고 관리 효율성 향상: HUB별 재고 관리를 통해 재고 부족 현상 해소
고객 만족도 향상: 빠르고 정확한 배송 서비스 제공
추가 고려 사항
시스템 통합: 기존 시스템과의 원활한 연동
데이터베이스 설계: HUB 관련 데이터를 효율적으로 저장하기 위한 데이터베이스 설계
보안: 개인정보 보호 및 시스템 보안 강화
성능: 시스템 성능 향상을 위한 최적화
참고: 위 모델은 간략화된 예시이며, 실제 시스템 구축 시에는 더욱 복잡한 요소들을 고려해야 합니다.

더 자세한 모델링을 위해서는 다음과 같은 정보가 필요합니다.

기존 시스템의 상세한 정보 (사용 기술, 데이터 구조 등)
HUB 운영 방식에 대한 상세한 설명
성능 요구 사항
보안 요구 사항
궁금한 점이 있으시면 언제든지 질문해주세요.

추가 질문
KT 물류센터의 현행 시스템은 어떤 기술로 구축되었나요?
HUB의 위치는 어떻게 결정될 예정인가요?
HUB 간의 물량 이동은 어떤 방식으로 관리될 예정인가요?
시스템 도입 후 성과 측정은 어떻게 할 계획인가요?
이러한 질문들을 통해 더욱 정확하고 효율적인 모델링을 수행할 수 있습니다.

-------------
A고객사 비즈니스 유연성과 성능 관점에서 상품을 관리하기 위한 데이터 모델을 새롭게 설계하고 설계 사유제시
<전제 조건>
상황에 따른 ERD제공 됨
문1) 예약 위주의 상품 관련 데이터 모델에 실시간 판매 가능한 상품 유형을 추가 하기 위한 방안을 제안하고 설계 하시오

문2) 자사 직접 판매 상품뿐만 아닌 입점 업체애 대한 상품 주문 관련 서비스 모델을 설계 하시오

문3) 상품 주문 절차에 대한 프로세스를 설계 하시오
 
문4) 상품 출시에 대한 라이프 사이클을 관리 하는 모델을 제시하고 설계 사유를 제시하시오

문5) 특정 상품에 대한 옵션별 관리 방안에 대한 모델을 제시하시오

1. 예약 위주의 상품에 실시간 판매 가능 상품 유형 추가
문제점:

기존 예약 위주 모델은 실시간 판매 상품의 특성을 반영하지 못함
재고 관리, 판매 상태 등 실시간 판매에 필요한 정보 부족
해결 방안:

상품 테이블:
상품 종류: 예약 상품, 실시간 판매 상품 구분
재고 수량: 실시간 판매 상품의 경우 필수
판매 상태: 예약 가능, 판매 중, 품절 등
주문 테이블:
주문 유형: 예약, 실시간 구분
결제 상태: 결제 완료, 결제 대기 등
ERD: [이미지: 상품 테이블에 상품 종류, 재고 수량, 판매 상태 추가, 주문 테이블에 주문 유형, 결제 상태 추가]
설계 사유:

상품 종류에 따른 차별화된 관리: 예약 상품과 실시간 판매 상품의 특성에 맞는 데이터를 저장하여 효율적인 관리
재고 관리 강화: 실시간 판매 상품의 경우 재고 수량을 정확하게 관리하여 품절 방지
판매 상태 관리: 상품의 판매 상태를 실시간으로 반영하여 정확한 정보 제공
2. 자사 직접 판매 상품 및 입점 업체 상품 주문 관련 서비스 모델
문제점:

기존 모델은 자사 상품에만 집중되어 있음
입점 업체 상품에 대한 관리 기능 부족
해결 방안:

판매자 테이블:
판매자 종류: 자사, 입점 업체 구분
상품 테이블:
판매자 ID 외래키 추가
주문 테이블:
판매자 ID 외래키 추가
ERD:
[이미지: 판매자 테이블 추가, 상품 테이블에 판매자 ID 외래키 추가, 주문 테이블에 판매자 ID 외래키 추가]

설계 사유:

판매자별 상품 관리: 자사 상품과 입점 업체 상품을 분리하여 관리
입점 업체 상품 주문 처리: 입점 업체 상품에 대한 주문 정보를 별도로 관리하여 효율적인 처리
3. 상품 주문 절차
고객이 상품 선택
장바구니에 담기 (예약 상품의 경우 예약 날짜 선택)
결제 진행
주문 정보 저장
배송 처리
ERD:
[이미지: 주문 테이블에 주문 상태, 배송 정보 추가]

설계 사유:

주문 상태 추적: 주문의 진행 상황을 실시간으로 확인
배송 정보 관리: 배송 관련 정보를 저장하여 배송 추적 가능
4. 상품 출시 라이프 사이클 관리 모델
문제점:

상품 출시 과정 관리 부족
상품 상태 변화에 대한 정보 부족
해결 방안:

상품 상태 테이블:
상품 개발, 검수, 출시, 판매 중, 단종 등 상태 관리
상품 히스토리 테이블:
상품 상태 변화 기록
ERD:
[이미지: 상품 상태 테이블, 상품 히스토리 테이블 추가]

설계 사유:

상품 출시 과정 관리: 상품 개발부터 단종까지 모든 과정을 관리
상품 상태 변화 추적: 상품 상태 변화 이력을 확인하여 문제 발생 시 원인 분석 가능
5. 상품 옵션별 관리 모델
문제점:

상품 옵션에 대한 정보 관리 부족
해결 방안:

옵션 테이블:
옵션 이름, 가격 등 저장
상품 옵션 매핑 테이블:
상품과 옵션 간의 관계 설정
ERD:
[이미지: 옵션 테이블, 상품 옵션 매핑 테이블 추가]

설계 사유:

상품 옵션 관리: 다양한 상품 옵션을 효율적으로 관리
옵션별 가격 관리: 옵션별 가격을 정확하게 반영
추가 고려 사항:

검색 기능: 상품 검색 기능 구현을 위한 인덱싱
추천 시스템: 고객 구매 패턴 분석을 통한 상품 추천
빅데이터 분석: 판매 데이터 분석을 통한 의사 결정 지원
클라우드 기반: 시스템 확장성 및 유연성 확보
설계 사유 요약:

유연성: 다양한 상품 유형과 판매 방식에 대한 유연한 대응
성능: 실시간 처리를 위한 효율적인 데이터 구조 설계
확장성: 시스템 성장에 따른 확장 가능성 고려
관리 편의성: 데이터 관리 및 분석을 위한 편리한 기능 제공
주의: 위에서 제시된 ERD는 예시이며, 실제 시스템 구축 시에는 고객사의 요구사항과 시스템 환경에 맞게 수정되어야 합니다.

더 자세한 상담을 원하시면 다음과 같은 정보를 제공해주세요.

현재 시스템의 기술 스택
예상되는 데이터량
성능 요구 사항
보안 요구 사항
궁금한 점이 있으시면 언제든지 질문해주세요.

----------
예약 처리 프로세스와 데이터 모델에서 발생하고 있는 동시성 이슈의 해결 방안 제시
문1) 다수의 사용자가 다수의 인벤토리 예약을 하기 위한 데이터 모델의 문제점을 확인하고, 해결을 위한
      방안을 제시하시오.
 <제약 조건>
예약 처리 프로세스는 Async 한 방식으로 구현 되어야 한다

문2) 다수의 사용자가 하나의 인벤토리 예약을 하려고 한다, 데이터 모델의 문제점을 확인하고 해결을 위한
      방안을 제시하시오.
 <제약 조건>
예약 처리 프로세스는 Async 한 방식으로 구현 되어야 한다     

문3) 예약된 서비스에 대해 취소 프로세스를 구성하시오 

예약 처리 프로세스 및 데이터 모델 동시성 이슈 해결 방안
1. 다수의 사용자가 다수의 인벤토리 예약 시 데이터 모델 문제점 및 해결 방안
문제점:

동시성 문제: 여러 사용자가 동시에 동일한 인벤토리를 예약하려 할 때, 실제 재고보다 더 많은 예약이 발생할 수 있는 문제.
데이터 일관성 문제: 예약 정보가 정확하게 반영되지 않아, 실제 재고와 예약 정보가 불일치할 수 있음.
Race Condition: 여러 쓰레드가 동시에 공유 자원(인벤토리)에 접근하여 예기치 않은 결과를 초래할 수 있음.
해결 방안:

낙관적 락(Optimistic Locking):
각 행에 version 필드를 추가하여 버전 정보를 관리
업데이트 시 버전을 비교하여 충돌 여부 확인
충돌 발생 시 재시도
비관적 락(Pessimistic Locking):
데이터 수정 전에 락을 걸어 다른 사용자의 접근을 차단
성능 저하 가능성
분산 락(Distributed Lock):
Redis, Zookeeper 등 분산 락 시스템 활용
여러 노드에서 동일한 자원에 대한 락을 관리
데이터베이스 트랜잭션:
하나의 논리적인 작업 단위로 묶어서 처리
성공하면 모두 반영, 실패하면 모두 취소
Async 처리:
메시지 큐(RabbitMQ, Kafka 등)를 이용하여 비동기적으로 처리
처리 속도 향상 및 시스템 부하 분산
데이터 모델:

Inventory 테이블:
id: Primary Key
quantity: 재고 수량
version: 낙관적 락을 위한 버전 정보
Order 테이블:
id: Primary Key
inventory_id: 외래키 (Inventory 테이블)
user_id: 외래키 (User 테이블)
version: 낙관적 락을 위한 버전 정보
status: 주문 상태 (예약, 결제 완료, 취소 등)
예시 코드 (Python, SQLAlchemy):

Python
from sqlalchemy import Column, Integer, ForeignKey, select
from sqlalchemy.orm import sessionmaker

# ... (생략)

async def create_order(session, inventory_id, user_id):
    inventory = await session.get(Inventory, inventory_id)
    inventory.version += 1

    try:
        new_order = Order(inventory=inventory, user=user, version=inventory.version)
        session.add(new_order)
        await session.commit()
    except SQLAlchemyError as e:
        # 낙관적 락 실패 시 재시도 로직
        print(f"Error creating order: {e}")
        await session.rollback()
        # 재시도 로직 구현
코드를 사용할 때는 주의가 필요합니다.

2. 다수의 사용자가 하나의 인벤토리 예약 시 데이터 모델 문제점 및 해결 방안
문제점: 위에서 언급한 문제와 동일
해결 방안: 위에서 제시한 해결 방안을 동일하게 적용
3. 예약된 서비스 취소 프로세스
취소 요청: 사용자가 예약 취소를 요청
취소 검증: 취소 가능 여부 확인 (예: 취소 마감 시간, 예약 상태 등)
재고 복원: 취소된 예약에 해당하는 재고를 복원
결제 취소: 결제가 완료된 경우 결제 취소 처리
취소 기록: 취소 내역을 로그에 기록
데이터 모델:

Order 테이블:
status: 주문 상태 (예약, 결제 완료, 취소 등)
canceled_at: 취소 시각
예시 코드:

Python
async def cancel_order(session, order_id):
    order = await session.get(Order, order_id)
    if order.status == "CANCELED":
        return  # 이미 취소된 경우

    order.status = "CANCELED"
    order.canceled_at = datetime.now()
    inventory = order.inventory
    inventory.quantity += 1  # 재고 복원
    await session.commit()
코드를 사용할 때는 주의가 필요합니다.

추가 고려 사항:

분산 시스템: 다수의 서버에서 동일한 데이터에 접근하는 경우 분산 락, 분산 데이터베이스 등을 고려해야 합니다.
성능: 대규모 트래픽을 처리하기 위해 캐싱, 인덱싱 등을 활용하여 성능을 향상시켜야 합니다.
테스트: 다양한 시나리오를 기반으로 충분한 테스트를 수행하여 시스템의 안정성을 확보해야 합니다.
핵심:

동시성 문제 해결을 위한 다양한 기법을 적용
데이터 일관성 유지
Async 처리를 통한 성능 향상
명확한 예약 상태 관리
주의: 위에서 제시된 해결 방안은 일반적인 예시이며, 실제 시스템 구축 시에는 시스템의 특성과 요구사항에 맞게 수정되어야 합니다. 

